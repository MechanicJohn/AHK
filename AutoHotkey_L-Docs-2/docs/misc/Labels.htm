<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Labels - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="Labels identify a line of code, and can be used as Goto targets or to form subroutines." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Labels</h1>

<h2 id="toc">Table of Contents</h2>
<ul>
  <li><a href="#syntax-and-usage">Syntax and Usage</a></li>
  <li><a href="#subroutines">Subroutines</a></li>
  <li><a href="#dynamic-labels">Dynamic Labels</a></li>
  <li><a href="#hotkeys-and-hotstrings">Hotkeys and Hotstrings</a></li>
  <li><a href="#named-loops">Named Loops</a></li>
  <li><a href="#Functions">Functions</a></li>
  <li><a href="#related">Related</a></li>
</ul>

<h2 id="syntax-and-usage">Syntax and Usage</h2>
<p>A label identifies a line of code, and can be used as a <a href="../commands/Goto.htm">Goto</a> target or to form a <a href="../commands/Gosub.htm">subroutine</a>.</p>
<pre class="Syntax">LabelName:</pre>
<p>To create a label, write the label name followed by a colon as shown above. Aside from whitespace and comments, no other code can be written on the same line.</p>
<p><strong>Names:</strong> Label names are not case sensitive, and may consist of any characters other than space, tab, comma and the <a href="EscapeChar.htm">escape character</a> (`). However, due to style conventions, it is generally better to use only letters, numbers, and the underscore character (for example: <em>MyListView</em>, <em>Menu_File_Open</em>, and <em>outer_loop</em>).</p>
<p><strong>Scope:</strong> Each function has its own list of local labels. If a local label has the same name as a global label, the local label takes precedence (and the global label is inaccessible). Local labels cannot be used with the <a href="../commands/Hotkey.htm">Hotkey</a> or <a href="../commands/Hotstring.htm">Hotstring</a> functions.</p>
<p><strong>Target:</strong> The target of a label is the next line of executable code. Executable code includes functions, assignments, <a href="../Variables.htm#Expressions">expressions</a> and <a href="../commands/Block.htm">blocks</a>, but not directives, labels, hotkeys or hotstrings. In the following example, <code>run_notepad</code> and <code>#n</code> both point at the <code>Run</code> line:</p>
<pre>run_notepad:
#n::
    Run "notepad"
    return
</pre>
<p><strong>Execution:</strong> Like directives, labels have no effect when reached during normal execution. In the following example, a message box is shown twice - once during execution of the subroutine by <a href="../commands/Gosub.htm">Gosub</a>, and again after the subroutine returns:</p>
<pre>Gosub Label1

Label1:
MsgBox <a href="../Variables.htm#ThisLabel">A_ThisLabel</a>
return</pre>

<h2 id="subroutines">Subroutines</h2>
<p>A subroutine is a portion of code which can be <em>called</em> to perform a specific task. Execution of a subroutine begins at the target of a label and continues until a <a href="../commands/Return.htm">Return</a> or <a href="../commands/Exit.htm">Exit</a> is encountered. Since the end of a subroutine depends on flow of control, any label can act as both a Goto target and the beginning of a subroutine.</p>

<h2 id="dynamic-labels">Dynamic Labels</h2>
<p>Many built-in functions which accept a label name also accept a <a href="../Variables.htm">variable</a>, in which case the name stored in the variable is used as the target. However, performance is slightly reduced because the target label must be &quot;looked up&quot; each time rather than only once when the script is first loaded.</p>

<h2 id="hotkeys-and-hotstrings">Hotkeys and Hotstrings</h2>
<p><a href="../Hotkeys.htm">Hotkey</a> and <a href="../Hotstrings.htm#label">hotstring labels</a> are also valid targets for <a href="../commands/Goto.htm">Goto</a>, <a href="../commands/Gosub.htm">Gosub</a> and other built-in functions. However, if a hotkey or hotstring has multiple <a href="../commands/_If.htm#variant">variants</a>, the variant closest to the top of the script is used. All of the hotkey's modifiers or hotstring's options are also part of its label name, but the final double-colon (::) is omitted.</p>

<h2 id="named-loops">Named Loops</h2>
<p>A label can also be used to identify a loop for the <a href="../commands/Continue.htm">Continue</a> and <a href="../commands/Break.htm">Break</a> statements. This allows the script to easily continue or break out of any number of nested loops.</p>

<h2 id="Functions">Functions</h2>
<p><a href="../Functions.htm">Functions</a> can be used in place of labels in a number of cases, including:</p>
<ul>
  <li><a href="../commands/Hotkey.htm">Hotkey</a></li>
  <li><a href="../objects/Menu.htm#Add">Menu.Add</a></li>
  <li><a href="../commands/SetTimer.htm">SetTimer</a></li>
</ul>
<p></p>
<p>The benefits of functions are that they can use local variables, and in some cases (such as Gui control events) they also accept parameters containing useful information.</p>

<h2 id="related">Related</h2>
<p><a href="../commands/IsLabel.htm">IsLabel</a>, <a href="../Variables.htm#ThisLabel">A_ThisLabel</a>, <a href="../commands/Gosub.htm">Gosub</a>, <a href="../commands/Goto.htm">Goto</a>, <a href="../commands/SetTimer.htm">SetTimer</a>, <a href="../commands/Hotkey.htm">Hotkey</a></p>

</body>
</html>
